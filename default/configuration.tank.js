// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–æ–≤, —è–≤–ª—è—é—â–∞—è—Å—è —á–µ–º-—Ç–æ –≤—Ä–æ–¥–µ —Ç–∞–Ω–∫–∞. –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ HEAL.
// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ö–∏–ª–ª—Ä–µ–π—Ç:  1     2     3     4     5 |    6     7     8
// 1x1: 12 * HEAL         12    24    36    48    60 |   72    84    96
// 2x2: 48 * HEAL         48    96   144   192   240 |  288   336   384
// 3x3: 68 * HEAL         68   136   204   272   340 |  408   476   544
// 4x4: 96 * HEAL         96   192   288   384   480 |  576   672   768

exports.processAll = function() {
    for (const configuration of Memory.configurations) {
        if (!configuration.id || !configuration.size || !configuration.type) {
            console.log('Error configuration memory!');
            continue;
        };
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é tank
        if (configuration.type != "tank") continue;

        process(configuration);
    }
}

const STATUS_WAIT  = 0;
const STATUS_READY = 1;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:
// * {Number} id   - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É Creep.memory.configuration_id
// * {Number} size - —Ä–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞
// * {String} type - —Ä–∞–≤–µ–Ω "tank"
//
// * {String} status - —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: "wait", "ready"
// * {Array}  creeps - –º–∞—Å—Å–∏–≤ —Å –∫—Ä–∏–ø–∞–º–∏ —Ä–∞–∑–º–µ—Ä–∞ `size x size`
//
// * {String} command - –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å. –ù–∞–ø—Ä–∏–º–µ—Ä:
//                      LEFT, RIGTH, BOTTOM, TOP - –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ
//                      ATTACK:${id}             - –∞—Ç–∞–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º id (–±–µ–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è)
//
// * {RoomPosition} position - –ø–æ–∑–∏—Ü–∏—è (–≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª)

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É –∫—Ä–∏–ø–∞:
// * {Number} configuration_id       - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –¥–µ–ª–∏—Ç—Å—è –Ω–∞ —Å–µ–∫—Ü–∏–∏:
 * 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—Ä–∏–ø–∞
 * 2. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ—è (–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫ –±–æ—Ç–∞–º–∏)
 * 3. –•–∏–ª–∏–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∫—Ä–∏–ø–æ–≤
 * 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
 */
const process = function(configuration) {
    const creeps = _.filter(Game.creeps, (creep) => creep.memory.configuration_id == configuration.id)
    // –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫—Ä–∏–ø–∞: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É –Ω–µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é configuration_id
    if (creeps.length != configuration.creeps.length) {
        // –ù–µ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫—Ä–∏–ø–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if (creeps.length > configuration.size * configuration.size) {
            console.log(`Configuration ${configuration.id} has extra creeps`);
            return; // TODO: –ù—É–∂–Ω–æ –ª–∏?
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏–ø–∞ –≤ –º–∞—Å—Å–∏–≤ –∫—Ä–∏–ø–æ–≤
        for (const creep of creeps) {
            const added = _.some(configuration.creeps, (creepName) => creepName == creep.name);
            if (added) continue;

            configuration.creeps.push(creep.name);
            console.log(`Add ${creep.name} to configuration ${configuration.id}`);
        }
    }

    let status = STATUS_WAIT;
return;
    // –ü—Ä–æ—Ü–µ—Å—Å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ—è
    for (let i = 0; i < configuration.creeps.length; i++) {
        // –ü–æ–∑–∏—Ü–∏—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–µ–Ω —Å—Ç–æ—è—Ç—å –∫—Ä–∏–ø
        const position = new RoomPosition(
            configuration.position.x() + i % configuration.size,
            configuration.position.y() + Math.floor(i / 2),
            configuration.position.roomName(),
        );
        const creepName = configuration.creeps[i];
        const creep = Game.creeps[creepName];
        if (creep.pos.x != position.x || creep.pos.y != position.y || creep.pos.roomName != position.roomName) {
            creep.say('üèÉ Configuration')
            creep.moveTo(position, {
                visualizePathStyle: {
                    stroke: '#00FFFF',
                    lineStyle: 'dashed',
                    opacity: .75
                }
            });
            status = STATUS_READY;
        }
    }

    // –ñ–¥–µ–º –ø–æ–∫–∞ –≤—Å–µ –∫—Ä–∏–ø—ã –∑–∞–π–º—É—Ç —Å–≤–æ–∏ –ø–æ–∑–∏—Ü–∏–∏
    if (status != STATUS_READY) return;

    ///////////////////////////////////////////////
    //        –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã—á–∏–Ω–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø–æ–≤        //
    ///////////////////////////////////////////////

    // –ú–∞—Å—Å—Ç–≤ —Ä–∞–∑–º–µ—Ä–∞ size x size, —Ö—Ä–∞–Ω—è—â–∏–π –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –•–ü
    let damaged =  _.map(configuration.creeps, (creepName) => {
        const creep = Game.creeps[creepName];
        return creep.hitsMax - creep.hits;
    })
    // –ú–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—Ä–∞ size x size, —Ö—Ä–∞–Ω—è—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –ø–æ—Ö–∏–ª–∏–ª –∫—Ä–∏–ø –∏–ª–∏ –Ω–µ—Ç
    let healing = _.map(configuration.creeps, (creepName) => false);

    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Ö–∏–ª–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏—Ö –∫—Ä–∏–ø–æ–≤
    for (let i = 0; i < configuration.creeps.length; i++) {
        // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏–ø–æ–≤ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ö–∏–ª
        const creeps = 1;
    }


    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Ö–∏–ª–∏—Ç—å –∫—Ä–∏–ø–æ–≤
    // const action = configuration.action;

}
const taskResource = require('task.resource');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –∑–∞–±—É—Å—Ç–∏—Ç—å –∫—Ä–∏–ø–∞ (–µ—Å—Ç—å –ª–∏ —á–∞—Å—Ç—å + —É –Ω–µ—ë –Ω–µ—Ç –±—É—Å—Ç–∞).
 */
exports.canBoost = function(creep, resourceType) {
    const partType = _.findKey(BOOSTS, boost => boost[resourceType]);
    return _.filter(creep.body, part => part.type == partType && !part.boost).length > 0;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –±—É—Å—Ç —É –∫—Ä–∏–ø–∞.
 */
exports.hasBoost = function(creep, resourceType) {
    const partType = _.findKey(BOOSTS, boost => boost[resourceType]);
    if (!partType) {
        console.log(`[${creep.room.name}][Boost] Not found resource type '${resourceType}' for check creep boost part`);
        return false
    }
    return _.filter(creep.body, part => part.type == partType && part.boost).length > 0;
}

/**
 * –ï—Å–ª–∏ —É –∫—Ä–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è boost, —Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–±—É—Å—Ç–∏—Ç—å –∫—Ä–∏–ø–∞ –º–∏–Ω–µ—Ä–∞–ª–æ–º
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –ü–æ–ª—É—á–∞–µ–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
 * 
 * 2. –ü–æ–∫–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏, —Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –µ—ë —ç–Ω–µ—Ä–≥–∏–µ–π:
 *    2.1. –í—ã–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ - –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ç—Ä—é–º
 *    2.2. –ü–æ–ª—É—á–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 *    2.3. –ö–ª–∞–¥–µ–º –µ—ë –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é
 * 
 * 3. –í—ã–∫–∏–¥—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∏–∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏.
 * 
 * 4. –ü–æ–∫–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–∏–Ω–µ—Ä–∞–ª–∞, —Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –µ–≥–æ –º–∏–Ω–µ—Ä–∞–ª–æ–º:
 *    4.1. –í—ã–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ - –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ç—Ä—é–º
 *    4.2. –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–µ—Ä–∞–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 *    4.3. –ö–ª–∞–¥–µ–º –µ–≥–æ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é
 * 
 * 5. –ë—É—Å—Ç–∏–º –∫—Ä–∏–ø–∞
 */
exports.checkBoost = function(creep) {
    if (!creep.memory.boost && creep.memory.boost_queue) {
        creep.memory.boost = creep.memory.boost_queue.shift();
    }
    
    if (!creep.memory.boost || creep.spawning) {
        return ERR_NOT_FOUND;
    }

    // 1. –ü–æ–ª—É—á–∞–µ–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å.
    const lab = (() => {
        if (creep.memory.lab_id) {
            return Game.getObjectById(creep.memory.lab_id);
        }

        // –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é –±–µ–∑ –∫—É–ª–¥–∞—É–Ω–∞.
        const usedLabs = Object.keys(Game.creeps).map(creepName => Game.creeps[creepName].memory.lab_id).filter(x => x);
        const lab = creep.pos.findClosestByRange(FIND_MY_STRUCTURES, {
            filter: (s) => s.structureType == STRUCTURE_LAB && s.cooldown == 0 && !usedLabs.includes(s.id)
        });
        return lab;
    })();
    
    if (!lab) {
        console.log(`[${creep.room.name}][Boost] Not found lab for boost creep ${creep.name}. Boost task was deleted.`);
        delete creep.memory.boost;
        return ERR_NOT_FOUND;
    }
    creep.memory.lab_id = lab.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
    const resourceType = creep.memory.boost;
    const partType = _.findKey(BOOSTS, boost => boost[resourceType]);
    if (!partType) {
        console.log(`[${creep.room.name}][Boost] Incorrect resource type '${resourceType}' for boost creep '${creep.name}'. Boost task was deleted.`);
        delete creep.memory.lab_id;
        delete creep.memory.boost;
        return ERR_NOT_FOUND;
    }
    const partsCount = _.filter(creep.body, part => part.type == partType).length;
    if (!partsCount) {
        console.log(`[${creep.room.name}][Boost] Creep '${creep.name}' doesn't have '${partType}' parts for boost by '${resourceType}'. Boost task was deleted.`);
        delete creep.memory.lab_id;
        delete creep.memory.boost;
        return ERR_NOT_FOUND;
    }

    // 2. –ü–æ–∫–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏, —Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –µ—ë —ç–Ω–µ—Ä–≥–∏–µ–π
    const totalEnergy = LAB_BOOST_ENERGY * partsCount;                 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –¥–ª—è –±—É—Å—Ç–∞ –∫—Ä–∏–ø–∞
    const labEnergy   = lab.store.getUsedCapacity(RESOURCE_ENERGY);    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
    const creepEnergy = creep.store.getUsedCapacity(RESOURCE_ENERGY);  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –∫—Ä–∏–ø–µ 
    console.log(`Energy: [${creepEnergy} + ${labEnergy} / ${totalEnergy}]`);
    if (labEnergy < totalEnergy) {
        creep.say("‚ö°Fill lab")
        // –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é —ç–Ω–µ—Ä–≥–∏–µ–π, –Ω—É–∂–Ω–æ –≤—ã–∫–∏–Ω—É—Ç—å –≤—Å–µ –ª–∏—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∏–∑ —Ç—Ä—é–º–∞.
        // –ù—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é.
        if (creep.store.getUsedCapacity() != creep.store.getUsedCapacity(RESOURCE_ENERGY)) {
            taskResource.fillClosestStructure(creep, STRUCTURE_TERMINAL);
            return OK;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –≤ —Ç—Ä—é–º –ø–æ–∫–∞:
        // 1. –í —Ç—Ä—é–º–µ –µ—Å—Ç—å –º–µ—Å—Ç–æ
        // 2. –°—É–º–º–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –∫—Ä–∏–ø–µ –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –º–µ–Ω—å—à–µ, —á–µ–º –Ω—É–∂–Ω–æ –¥–ª—è –±—É—Å—Ç–∞
        if (creep.store.getFreeCapacity() != 0 && (creepEnergy + labEnergy) < totalEnergy) {
            const needEnergy = totalEnergy - (creepEnergy + labEnergy);
            const energyCount = Math.min(needEnergy, creep.store.getFreeCapacity());
            taskResource.withdrawClosestResources(creep, [STRUCTURE_STORAGE, STRUCTURE_CONTAINER, STRUCTURE_TERMINAL], RESOURCE_ENERGY, energyCount);
        }else {
            taskResource.fillTarget(creep, lab, RESOURCE_ENERGY);
        }
        return OK;
    }
    
    // 3. –í—ã–∫–∏–¥—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∏–∑ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏:
    // * –ï—Å–ª–∏ –≤ –∫—Ä–∏–ø–µ –ª–µ–∂–∞—Ç '–ª–µ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã'
    // * –ï—Å–ª–∏ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –ª–µ–∂–∞—Ç '–ª–µ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã'
    if (creep.store.getUsedCapacity() != creep.store.getUsedCapacity(resourceType)  || (lab.mineralType && lab.mineralType != resourceType)) {
        if (lab.store.getUsedCapacity(lab.mineralType) > 0 && creep.store.getFreeCapacity() > 0) {
            console.log(`[${creep.room.name}][Boost] Withdraw extra mineral: ${lab.mineralType}`)
            taskResource.withdrawTarget(creep, lab, lab.mineralType);
        }else {
            console.log(`[${creep.room.name}][Boost] Transfer extra mineral: ${lab.mineralType}`)
            taskResource.fillClosestStructure(creep, STRUCTURE_TERMINAL);
        }
        return OK;
    }

    // 4. –ü–æ–∫–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–∏–Ω–µ—Ä–∞–ª–æ–≤, —Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –µ—ë –º–∏–Ω–µ—Ä–∞–ª–∞–º–∏
    const totalResources = LAB_BOOST_MINERAL * partsCount;            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Ä–∞–ª–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –±—É—Å—Ç–∞ –∫—Ä–∏–ø–∞
    const labResources   = lab.store.getUsedCapacity(resourceType);   // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏
    const creepResources = creep.store.getUsedCapacity(resourceType); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –≤ –∫—Ä–∏–ø–µ
    console.log(`[${creep.room.name}][Boost] Resource ${resourceType} [In creep ${creepResources} + In lab ${labResources} / Need ${totalResources}]`);
    if (labResources < totalResources) {
        creep.say("üíéFill lab")

        // –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é —ç–Ω–µ—Ä–≥–∏–µ–π, –Ω—É–∂–Ω–æ –≤—ã–∫–∏–Ω—É—Ç—å –≤—Å–µ –ª–∏—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∏–∑ —Ç—Ä—é–º–∞.
        // –ù—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é.
        if (creep.store.getUsedCapacity() != creep.store.getUsedCapacity(resourceType)) {
            taskResource.fillClosestStructure(creep, STRUCTURE_STORAGE);
            return OK;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –≤ —Ç—Ä—é–º –ø–æ–∫–∞:
        // 1. –í —Ç—Ä—é–º–µ –µ—Å—Ç—å –º–µ—Å—Ç–æ
        // 2. –°—É–º–º–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –∫—Ä–∏–ø–µ –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –º–µ–Ω—å—à–µ, —á–µ–º –Ω—É–∂–Ω–æ –¥–ª—è –±—É—Å—Ç–∞
        if (creep.store.getFreeCapacity() != 0 && (creepResources + labResources) < totalResources) {
            const needResources = totalResources - (labResources + creepResources)
            const resourceCount = Math.min(needResources, creep.store.getFreeCapacity());
            const result = taskResource.withdrawClosestResources(creep, [STRUCTURE_STORAGE, STRUCTURE_CONTAINER, STRUCTURE_TERMINAL], resourceType, resourceCount);
            if (result == ERR_NOT_FOUND) {
                console.log(`[${creep.room.name}][Boost] Not found resource ${resourceType} for boost creep ${creep.name}. Boost task was deleted.`);
                delete creep.memory.lab_id;
                delete creep.memory.boost;
                return ERR_NOT_FOUND;
            }
        }else {
            taskResource.fillTarget(creep, lab, resourceType);
        }
        return OK;
    }

    // 5. –ë—É—Å—Ç–∏–º –∫—Ä–∏–ø–∞
    const status = lab.boostCreep(creep, partsCount)
    console.log(`LabBoost status: ${status}`);
    switch (status) {
        case OK:
            delete creep.memory.lab_id;
            delete creep.memory.boost;
            creep.memory.boosted = true;
            return OK;

        case ERR_NOT_IN_RANGE:
            creep.moveTo(lab, {
                costCallback: (roomName, costMatrix) => {
                    if (roomName == "W9S37") {
                        costMatrix.set(11, 45, 0);
                        costMatrix.set(12, 44, 0);
                    }
                },
                visualizePathStyle: {
                    stroke: '#0000FF'
                },
                maxRooms: 1
            });
            return OK;

        default:
            creep.say(`‚ö†Ô∏èError ${status}`)
            console.log(`[checkBoost] Error ${status}. Boost tesk was deleted`)
            delete creep.memory.boost
            return ERR_NOT_FOUND;
    }
}

exports.checkUnboost = function(creep) {
    if (!creep.memory.unboost || creep.spawning) {
        return ERR_NOT_FOUND;
    }
    
    // 1. –ü–æ–ª—É—á–∞–µ–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å.
    const lab = (() => {
        if (creep.memory.lab_id) {
            return Game.getObjectById(creep.memory.lab_id);
        }

        // –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é –±–µ–∑ –∫—É–ª–¥–∞—É–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º.
        const usedLabs = Object.keys(Game.creeps).map(creepName => Game.creeps[creepName].memory.lab_id).filter(x => x);
        const containers = creep.room.find(FIND_STRUCTURES, {filter: (s) => s.structureType == STRUCTURE_CONTAINER});
        const lab = creep.pos.findClosestByRange(FIND_MY_STRUCTURES, {
            filter: (s) => s.structureType == STRUCTURE_LAB
                        && s.cooldown == 0
                        && !usedLabs.includes(s.id)
                        && _.some(containers, container => container.pos.isNearTo(s))
        });
        return lab;
    })();
    
    if (!lab) {
        console.log(`Not found lab for unboost creep ${creep.name}. Unboost task was deleted.`);
        delete creep.memory.unboost;
        return ERR_NOT_FOUND;
    }
    
    const container = (() => {
        if (creep.memory.container_id) {
            return Game.getObjectById(creep.memory.container_id);
        }
        const containers = creep.room.find(FIND_STRUCTURES, {filter: (s) => s.structureType == STRUCTURE_CONTAINER});
        for (const container of containers) {
            if (container.pos.isNearTo(lab)) {
                creep.memory.container_id = container.id;
                return container;
            }
        }
    })();
    
    if (!container) {
        console.log(`Not found container for unboost creep ${creep.name}. Unboost task was deleted.`);
        delete creep.memory.unboost;
        return ERR_NOT_FOUND; 
    }
    
    if (!creep.pos.isEqualTo(container)) {
        creep.moveTo(container);
        return OK;
    }
    
    lab.unboostCreep(creep);
    delete creep.memory.unboost;
    creep.memory.unboosted = false;
}
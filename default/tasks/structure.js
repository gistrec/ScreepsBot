const taskRoom = require('./room');

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–º–æ–Ω—Ç–∏—Ä—É—é—Ç—Å—è –∫–∞–∫–∏–º-–ª–∏–±–æ –±–æ—Ç–æ–º
exports.repearing_structures = [];
exports.charging_structures = [];

exports.hasHealingCreeps = function(spawn) {
    const creep = spawn.pos.findInRange(FIND_MY_CREEPS, 2, {
        filter: (c) => c.memory.healing
    });
    return creep.length != 0;
}

exports.buildTarget = function(creep, target) {
    if (creep.memory.action != 'build') {
        creep.memory.action = 'build';
        creep.say('üõ†Ô∏è Build');
    }

    const status = creep.build(target);

    switch (status) {
        case OK:
        case ERR_BUSY: // –ë–æ—Ç –µ—â–µ —Å–ø–∞–≤–Ω–∏—Ç—Å—è
            return OK;

        case ERR_NOT_IN_RANGE:
            creep.moveTo(target, {
                // costCallback: (roomName, costMatrix) => taskRoom.applyCostMatrixRewrites(roomName, costMatrix),
                visualizePathStyle: { stroke: '#00FF00' },
                maxRooms: 1,
            });
            return OK;

        default:
            creep.say(`‚ö†Ô∏èError ${status}`)
            console.log(`[buildTarget] Error ${status}`)
            return ERR_NOT_FOUND;
    }
}

/**
 * –ó–∞–¥–∞—á–∞ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –±–ª–∏–∂–∞–π—à–µ–π –ø–æ—Å—Ç—Ä–æ–π–∫–∏. –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –ï—Å–ª–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ERR_NOT_FOUND
 * 2. –ï–¥–µ–º –∫ –ø–æ—Å—Ç—Ä–æ–π–∫–µ
 * 3. –°—Ç—Ä–æ–∏–º –ø–æ—Å—Ç—Ä–æ–π–∫—É
 */
exports.buildClosest = function(creep) {
    const target = creep.pos.findClosestByRange(FIND_MY_CONSTRUCTION_SITES, {
        filter: (s) => s.room.name == creep.room.name
    });
    if (!target) return ERR_NOT_FOUND;

    return exports.buildTarget(creep, target);
}


/**
 * –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–æ—á–∏–Ω–∫—É —Ü–µ–ª–∏. –ê–ª–≥–æ—Ä–∏—Ç–º
 * 1. –ï–¥–µ–º –∫ —Ü–µ–ª–µ
 * 2. –ß–∏–Ω–∏–º
 */
exports.repearTarget = function(creep, target) {
    if (creep.memory.action != 'repair') {
        creep.memory.action = 'repair';
        creep.say('ü©π Repair');
    }

    const status = creep.repair(target);

    switch (status) {
        case OK:
        case ERR_BUSY: // –ë–æ—Ç –µ—â–µ —Å–ø–∞–≤–Ω–∏—Ç—Å—è
            return OK;

        case ERR_NOT_IN_RANGE:
            creep.moveTo(target, {
                // costCallback: (roomName, costMatrix) => taskRoom.applyCostMatrixRewrites(roomName, costMatrix),
                visualizePathStyle: { stroke: '#00FF00' },
                maxRooms: 1,
            });
            return OK;

        default:
            creep.say(`‚ö†Ô∏èError ${status}`)
            console.log(`[repearTarget] Error ${status}`)
            return ERR_NOT_FOUND;
    }
}

/**
 * –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–æ—á–∏–Ω–∫—É. –ê–ª–≥–æ—Ä–∏—Ç–º:
 * @param {Array} types - —Ç–∏–ø—ã —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–ª—è –ø–æ—á–∏–Ω–∫–∏
 */
exports.startRepearClosestStructs = function(creep, types, full_health = false) {
    // –î–æ—Ä–æ–≥–∞ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –º–æ–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º...

    const target = creep.pos.findClosestByRange(FIND_STRUCTURES, {
        filter: (s) => types.includes(s.structureType) // –ß–∏–Ω–∏–º –∑–∞–¥–∞–Ω–Ω—ã–π —Ç–∏–ø
                    && exports.repearing_structures.includes(s.id) == false // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –µ—â–µ –Ω–∏–∫–µ–º –Ω–µ —á–∏–Ω–∏—Ç—Å—è
                    && ((full_health) ? (s.hits < s.hitsMax * 0.99) : (s.hits < s.hitsMax * 0.5))
                    && s.hits > 0
    });
    if (!target) return ERR_NOT_FOUND;

    creep.memory.repairing  = target.id;
    exports.repearing_structures.push(target.id)

    return exports.repearTarget(creep, target);
}

exports.continueRepearSturcture = function(creep) {
    if (creep.memory.repairing) {
        if (!exports.repearing_structures.includes(creep.memory.repairing)) {
            exports.repearing_structures.push(creep.memory.repairing)
        }

        const target_id = creep.memory.repairing;
        const target = Game.getObjectById(target_id);
        if (target && target.hits < target.hitsMax) {
            return exports.repearTarget(creep, target);
        } else {
            delete creep.memory.repairing;
            _.remove(exports.repearing_structures, id => id == target_id);
        }
    }
    return ERR_NOT_FOUND;
}

exports.dismantleTarget = function(creep, target) {
    const status = creep.dismantle(target);

    switch (status) {
        case OK:
        case ERR_BUSY: // –ë–æ—Ç –µ—â–µ —Å–ø–∞–≤–Ω–∏—Ç—Å—è
            return OK;

        case ERR_NOT_IN_RANGE:
            creep.moveTo(target, {
                // costCallback: (roomName, costMatrix) => taskRoom.applyCostMatrixRewrites(roomName, costMatrix),
                visualizePathStyle: { stroke: '#FFFF33' },
                maxRooms: 3
            });
            return OK;

        default:
            creep.say(`‚ö†Ô∏èError ${status}`)
            console.log(`[dismantleTarget] Error ${status}`)
            return ERR_NOT_FOUND;
    }
}


/**
 * –£–ª—É—á—à–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä. –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –ï–¥–µ–º –∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É
 * 2. –£–ª—É—á—à–∞–µ–º
 */
exports.upgradeController = function(creep, controller = creep.room.controller) {
    if (!controller.my || controller.upgradeBlocked) {
        return ERR_NOT_FOUND;
    }
    if (creep.memory.action != 'controller') {
        creep.memory.action = 'controller';
        creep.say('üîºController');
    }
    const status = creep.upgradeController(controller);

    if (status == -1) {
        creep.say("Problem")
    }

    switch (status) {
        case OK:
        case ERR_BUSY: // –ë–æ—Ç –µ—â–µ —Å–ø–∞–≤–Ω–∏—Ç—Å—è
            return OK;

        case ERR_NOT_IN_RANGE:
            creep.moveTo(controller, {
                // costCallback: (roomName, costMatrix) => taskRoom.applyCostMatrixRewrites(roomName, costMatrix),
                visualizePathStyle: { stroke: '#FFFF33' },
                maxRooms: 1,
            });
            return OK;

        default:
            creep.say(`‚ö†Ô∏èError ${status}`)
            console.log(`[upgradeController] Error ${status}`)
            return ERR_NOT_FOUND;
    }
}